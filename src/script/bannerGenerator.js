const readline = require('readline');
const fs = require('fs');
const request = require('request');
const figlet = require('figlet');
const { exec } = require('child_process');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const colors = {
  black: "\x1b[0;30m",
  red: "\x1b[0;31m",
  green: "\x1b[0;32m",
  yellow: "\x1b[0;33m",
  blue: "\x1b[0;34m",
  purple: "\x1b[0;35m",
  cyan: "\x1b[0;36m",
  white: "\x1b[0;37m",
  bblack: "\x1b[1;30m",
  bred: "\x1b[1;31m",
  bgreen: "\x1b[1;32m",
  byellow: "\x1b[1;33m",
  bblue: "\x1b[1;34m",
  bpurple: "\x1b[1;35m",
  bcyan: "\x1b[1;36m",
  bwhite: "\x1b[1;37m"
};

const ask = `${colors.green}[${colors.white}?]${colors.yellow} `;
const success = `${colors.green}[${colors.white}√${colors.green}] `;
const error = `${colors.red}[${colors.white}!${colors.red}] `;
const pw = `${colors.yellow}\n[${colors.white}+${colors.yellow}] Please Wait!`;

const logo = colors.blue + `
${colors.cyan}██████╗░░█████╗░███╗░░██╗███╗░░██╗███████╗██████╗░
${colors.red}██╔══██╗██╔══██╗████╗░██║████╗░██║██╔════╝██╔══██╗
${colors.green}██████╦╝███████║██╔██╗██║██╔██╗██║█████╗░░██████╔╝
${colors.purple}██╔══██╗██╔══██║██║╚████║██║╚████║██╔══╝░░██╔══██╗
${colors.cyan}██████╦╝██║░░██║██║░╚███║██║░╚███║███████╗██║░░██║
${colors.green}╚═════╝░╚═╝░░╚═╝╚═╝░░╚══╝╚═╝░░╚══╝╚══════╝╚═╝░░╚═╝

${colors.blue}░██████╗░███████╗███╗░░██╗███████╗██████╗░░█████╗░████████╗░█████╗░██████╗░
${colors.red}██╔════╝░██╔════╝████╗░██║██╔════╝██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗██╔══██╗
${colors.green}██║░░██╗░█████╗░░██╔██╗██║█████╗░░██████╔╝███████║░░░██║░░░██║░░██║██████╔╝
${colors.purple}██║░░╚██╗██╔══╝░░██║╚████║██╔══╝░░██╔══██╗██╔══██║░░░██║░░░██║░░██║██╔══██╗
${colors.cyan}╚██████╔╝███████╗██║░╚███║███████╗██║░░██║██║░░██║░░░██║░░░╚█████╔╝██║░░██║
${colors.green}░╚═════╝░╚══════╝╚═╝░░╚══╝╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝

${colors.purple}                               [By \x6B\x34\x69\x74\x72\x75\x6E]
`;

function slowprint(n) {
  for (let word of n + '\n') {
    process.stdout.write(word);
    setTimeout(() => {}, 10);
  }
}

function escapeForJavascript(text) {
  return text
    .replace(/\\/g, '\\\\')
    .replace(/`/g, '\\`')
    .replace(/\$/g, '\\$');
}

function writer(logotext, filename) {
  logotext = logotext.toString();
  const escapedLogotext = escapeForJavascript(logotext);

  fs.writeFile(filename, `
// Generated by banner-generator. Github: https://github.com/\x6B\x34\x69\x74\x72\x75\x6E/banner-generator

const colors = ${JSON.stringify(colors)};

// Use colors according to your wish

// Use https://fsymbols.com/generators/carty/ for your own font in banner

// If you use a custom banner from any site, you may use custombanner.py to add colors easily

const logo = \`
\${colors.green}${escapedLogotext}
\`;

function slowprint(n) {
  for (let word of n + '\\n') {
    process.stdout.write(word);
    setTimeout(() => {}, 10);
  }
}

slowprint(logo);
`, (err) => {
    if (err) {
      console.log(`\n${error}Error: ${err}`);
      return;
    }
    console.log(`\n${success}File saved as ${filename}`);
    exec('node ' + filename, (error, stdout, stderr) => {
      if (error) {
        console.log('\n' + error + 'Error executing the generated file.');
      }
    });
  });
}

slowprint(logo);
console.log('\n[+]' + colors.yellow + ' Choose one of the three options:');
const options = `
${colors.red}=====================================================================================
||                       ||    ${colors.purple} _   _ _       _   _                                ||
||                       ||    ${colors.blue}| | | (_)     | | | |___  ___ _ __                  ||
||1. Figlet              ||    ${colors.green}| |_| | |_____| | | / __|/ _ \\ '__|                 ||
||                       ||    ${colors.cyan}|  _  | |_____| |_| \\__ \\  __/ |                    ||
||                       ||    ${colors.yellow}|_| |_|_|      \\___/|___/\\___|_|                    ||
||                       ||    ${colors.red}                                                    ||
=====================================================================================
||                       ||   ${colors.purple}  _    _ _   _    _                                  ||
||                       ||   ${colors.blue} | |  | (_) | |  | |                                 ||
||                       ||   ${colors.green} | |__| |_  | |  | |___  ___ _ __                    ||
||2. WebSite             ||   ${colors.cyan} |  __  | | | |  | / __|/ _ \\ '__|                   ||
||                       ||   ${colors.yellow} | |  | | | | |__| \\__ \\  __/ |                      ||
||                       ||   ${colors.red} |_|  |_|_|  \\____/|___/\\___|_|                      ||
||                       ||                                                        ||
=====================================================================================  
`;

console.log(colors.green + '[+]' + colors.yellow + ' Choose one of the three options:' + options);

rl.question(ask + 'Select ' + colors.purple + '> ', (num) => {
  if (num === "1") {
    rl.question('\n' + ask + 'Enter word(s) ' + colors.purple + '> ', (logoword) => {
      if (logoword === "") {
        console.log('\n' + error + 'No Input');
        setTimeout(() => {}, 2000);
        main();
      }

      figlet(logoword, (err, data) => {
        if (err) {
          console.log('\n' + error + 'Error generating the ASCII art: ' + err);
          process.exit(1);
        }
        const logotext = data;
        rl.question('\n' + ask + 'Output File Name, recommended (.js)' + colors.purple + '>', (filename) => {
          if (filename === "") {
            console.log('\n' + error + 'No Input');
            setTimeout(() => {}, 2000);
            main();
          }
          exec('rm -rf ' + filename, () => {
            writer(logotext, filename);
          });
        });
      });
    });
  } else if (num === "2") {
    rl.question('\n' + ask + 'Enter word(s) ' + colors.purple + '>', (logoword) => {
      if (logoword === "") {
        console.log('\n' + error + 'No Input');
        setTimeout(() => {}, 2000);
        main();
      }

      console.log(pw);
      const url = 'https://artii.herokuapp.com/make?text=' + logoword;
      request(url, (error, response, body) => {
        if (error || body === "") {
          console.log(error + 'No Internet or empty input!');
          process.exit(1);
        }
        rl.question('\n' + ask + 'Output File Name, recommended (.js)' + colors.purple + '>', (filename) => {
          exec('rm -rf ' + filename, () => {
            writer(body, filename);
          });
        });
      });
    });
  } else {
    console.log('\n' + error + 'Error! Please choose the right number!');
    setTimeout(() => {}, 2000);
    main();
  }
});

function main() {
  rl.close();
  process.exit(0);
}
